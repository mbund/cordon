// Code generated by bpf2go; DO NOT EDIT.
//go:build (386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64 || wasm) && linux

package objs

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"
	"structs"

	"github.com/cilium/ebpf"
)

type BpfConnectRequest struct {
	_     structs.HostLayout
	Daddr uint32
	Dport uint16
	_     [2]byte
}

type BpfConnectResponse struct {
	_       structs.HostLayout
	String  [16]int8
	Verdict bool
}

type BpfCounter struct {
	_    structs.HostLayout
	Lock struct {
		_   structs.HostLayout
		Val uint32
	}
	Next uint32
}

// LoadBpf returns the embedded CollectionSpec for Bpf.
func LoadBpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Bpf: %w", err)
	}

	return spec, err
}

// LoadBpfObjects loads Bpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*BpfObjects
//	*BpfPrograms
//	*BpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadBpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadBpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// BpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfSpecs struct {
	BpfProgramSpecs
	BpfMapSpecs
	BpfVariableSpecs
}

// BpfProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfProgramSpecs struct {
	RestrictConnect *ebpf.ProgramSpec `ebpf:"restrict_connect"`
}

// BpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfMapSpecs struct {
	CounterMapConnect    *ebpf.MapSpec `ebpf:"counter_map_connect"`
	CounterMapMirror     *ebpf.MapSpec `ebpf:"counter_map_mirror"`
	CounterMapSleep      *ebpf.MapSpec `ebpf:"counter_map_sleep"`
	RequestArrayConnect  *ebpf.MapSpec `ebpf:"request_array_connect"`
	RequestArrayMirror   *ebpf.MapSpec `ebpf:"request_array_mirror"`
	RequestArraySleep    *ebpf.MapSpec `ebpf:"request_array_sleep"`
	ResponseArrayConnect *ebpf.MapSpec `ebpf:"response_array_connect"`
	ResponseArrayMirror  *ebpf.MapSpec `ebpf:"response_array_mirror"`
	ResponseArraySleep   *ebpf.MapSpec `ebpf:"response_array_sleep"`
}

// BpfVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfVariableSpecs struct {
	Blockme *ebpf.VariableSpec `ebpf:"blockme"`
	Pid     *ebpf.VariableSpec `ebpf:"pid"`
}

// BpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfObjects struct {
	BpfPrograms
	BpfMaps
	BpfVariables
}

func (o *BpfObjects) Close() error {
	return _BpfClose(
		&o.BpfPrograms,
		&o.BpfMaps,
	)
}

// BpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfMaps struct {
	CounterMapConnect    *ebpf.Map `ebpf:"counter_map_connect"`
	CounterMapMirror     *ebpf.Map `ebpf:"counter_map_mirror"`
	CounterMapSleep      *ebpf.Map `ebpf:"counter_map_sleep"`
	RequestArrayConnect  *ebpf.Map `ebpf:"request_array_connect"`
	RequestArrayMirror   *ebpf.Map `ebpf:"request_array_mirror"`
	RequestArraySleep    *ebpf.Map `ebpf:"request_array_sleep"`
	ResponseArrayConnect *ebpf.Map `ebpf:"response_array_connect"`
	ResponseArrayMirror  *ebpf.Map `ebpf:"response_array_mirror"`
	ResponseArraySleep   *ebpf.Map `ebpf:"response_array_sleep"`
}

func (m *BpfMaps) Close() error {
	return _BpfClose(
		m.CounterMapConnect,
		m.CounterMapMirror,
		m.CounterMapSleep,
		m.RequestArrayConnect,
		m.RequestArrayMirror,
		m.RequestArraySleep,
		m.ResponseArrayConnect,
		m.ResponseArrayMirror,
		m.ResponseArraySleep,
	)
}

// BpfVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfVariables struct {
	Blockme *ebpf.Variable `ebpf:"blockme"`
	Pid     *ebpf.Variable `ebpf:"pid"`
}

// BpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfPrograms struct {
	RestrictConnect *ebpf.Program `ebpf:"restrict_connect"`
}

func (p *BpfPrograms) Close() error {
	return _BpfClose(
		p.RestrictConnect,
	)
}

func _BpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bpf_bpfel.o
var _BpfBytes []byte
